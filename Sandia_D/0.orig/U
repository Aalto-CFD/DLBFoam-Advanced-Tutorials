/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  8
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    location    "0";
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

internalField   uniform ( 0.9 0 0 );

boundaryField
{
    inletJet
    {
        type    codedFixedValue;
        value   uniform (0 0 0);
        name    inletJetFixedValueU;   // name of generated BC

        code
        #{
            #define USE_TURBULENCE_GENERATOR 0

            #if USE_TURBULENCE_GENERATOR
                // -----------------------------------
                // ---=== Artificial turbulence ===---
                // -----------------------------------
                // Bibliography:
                // 1. Pitsch et al., 2000
                // 2. Danaila and Boersma, 2000

                const int   m = 8;       // [-]     - total numbers of modes
                // kA [-] - amplitude coefficient, to fit experimental RMS
                const float kA = 0.5;
                // mode [-]     - frequency coefficient of mode
                const int   mode[m]  = {1, 2, 3, 4, 5, 6,
                                         0, 0};
                // alpha [rad]   - phase shift of each helical mode in the
                //                 azimuthal direction relative to i*phi
                const float alpha[m] = {ALPHA_TO_BE_GENERATED_BY_PYTHON_SCRIPT};
                // Psi [rad/s] - mode's angular velocities
                const float Psi[m] = {PSI_TO_BE_GENERATED_BY_PYTHON_SCRIPT};
                // ----------------------------------
                const scalar t = this->db().time().value();
            #endif

            fixedValueFvPatchVectorField myPatch(*this);
            forAll(this->patch().Cf(), faceI){
                scalar y = this->patch().Cf()[faceI].y();
                scalar z = this->patch().Cf()[faceI].z();

                scalar r = sqrt(y*y+z*z);

                scalar ux = 0.0; // default velocity
                // Main jet inlet
                ux = 14.21124*(log10(-r+1.48011e-07+0.0036)-log10(1.48011e-07));

                // ---=== Artificial turbulence ===---
                #if USE_TURBULENCE_GENERATOR
                    scalar phi = atan2(y,z); // for atan2 see C++ ref
                    scalar ux_oscill = 0.0; // turbulent velocity component

                    scalar u_rms_experiment = 2.07+1029*r;
                    float A = kA*u_rms_experiment;

                    for (int i = 0; i < m; ++i) { // i = mode
                        // float Psi = 2*3.1415*St[i]*ux/(2*rch4); // [2]
                        ux_oscill += A * sin(alpha[i] + mode[i]*phi + Psi[i]*t);
                    }
                    ux += ux_oscill;
                    if (ux < 0) { // just in case
                        ux = 0;
                    }
                #endif
                // -----------------------------------
                myPatch[faceI] = vector(ux, 0.0, 0.0);
            }
            operator==(myPatch);
        #};
    }

    inletPilot
    {
        type    codedFixedValue; // turbulentInlet
        value   uniform (0 0 0);
        name    sandiaFixedValueU;   // name of generated BC

        code
        #{
            scalar rplt_in   =   7.7e-03/2;
            scalar rplt_out  =  18.2e-03/2;
            scalar rplt_c = (rplt_in+rplt_out)/2;

            fixedValueFvPatchVectorField myPatch(*this);
            forAll(this->patch().Cf(), faceI){
                scalar y = this->patch().Cf()[faceI].y();
                scalar z = this->patch().Cf()[faceI].z();

                scalar r = sqrt(y*y+z*z);

                scalar ux = 0.0; // default velocities. Will be set to the wall b/w main jet and pilot for ex.

                if (r <= rplt_c) {
                    ux = 8.27663*(log10(r-rplt_in+2.32384e-05) - log10(2.32384e-05));
                } else {
                    ux = 8.27663*(log10(-(r-rplt_out)+2.32384e-05) - log10(2.32384e-05));
                }

                myPatch[faceI] = vector(ux, 0.0, 0.0);
            }
            operator==(myPatch);
        #};
    }

    inletAir
    {
        type            fixedValue;
        value           uniform (0.9 0 0);
    }

    wallInlet
    {
        type            fixedValue;
        value           uniform (0 0 0);
    }

    wallOutside
    {
        type            fixedValue;
        value           uniform (0 0 0);
    }

    outlet
    {
        // When pressure is set to waveTransmissive BC, pressureInletOutletVelocity is used
        // https://github.com/OpenFOAM/OpenFOAM-8/tree/1ac1210412fb6673f9cec803e827f7ebb07b7cd2/tutorials/compressible/rhoPimpleFoam/LES/pitzDaily/0
        // But it generated backflow after some time (~0.8s), so inletOutlet is used instead
        type            inletOutlet;
        inletValue      uniform (0 0 0);
        value           uniform (0 0 0);
    }
}

// ************************************************************************* //
