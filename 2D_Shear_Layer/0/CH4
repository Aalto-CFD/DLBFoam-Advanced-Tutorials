/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.4.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    location    "0";
    object      CH4;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 0 0 0 0 0 0];

internalField  #codeStream
{

    code
    #{

        const IOdictionary& d = static_cast<const IOdictionary&>(dict);
        const fvMesh& mesh = refCast<const fvMesh>(d.db());
        const vectorField& CC = mesh.C(); //cell center
        
         
        scalarField CH4(mesh.nCells());
        scalar CH4_i = 0.005;

        scalar A = 0.005;
        scalar L = 0.0015;
        scalar ro = L/20;
        scalar B = 5;
        

        forAll(CC,cellI)
        {

            
        	scalar y = CC[cellI].y(); 
            
            CH4[cellI] = CH4_i - A * 0.5 * (1-tanh(B*(mag(y-L/2)/ro - ro/mag(y-L/2))));
            
        }
        
        writeEntry(os,"",CH4); 
    #};

    //! Optional:
    codeInclude
    #{

        #include "fvCFD.H"

    #};


    codeOptions
    #{

        -I$(LIB_SRC)/finiteVolume/lnInclude \
        -I$(LIB_SRC)/meshTools/lnInclude

    #};


    //! libs:

    codeLibs
    #{
        -lmeshTools \
        -lfiniteVolume
    #};

};
boundaryField
{
    upperBoundary
    {
        type            zeroGradient;
    }

    lowerBoundary
    {
        type            zeroGradient;
    }

    leftBoundary
    {
        type            cyclic;
    }

    rightBoundary
    {
        type            cyclic;
    }
    }

    frontAndBack
    {
        type            empty;
    }

}


// ************************************************************************* //
