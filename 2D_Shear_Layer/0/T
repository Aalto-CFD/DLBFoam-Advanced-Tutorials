/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.4.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    location    "0";
    object      T;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 0 0 1 0 0 0];


internalField  #codeStream
{

    code
    #{

        const IOdictionary& d = static_cast<const IOdictionary&>(dict);
        const fvMesh& mesh = refCast<const fvMesh>(d.db());
        const vectorField& CC = mesh.C(); //cell center


        scalarField T(mesh.nCells());
        scalar T_i = 900;

        scalar A = 200;
        scalar L = 0.0015;
        scalar ro = L/20;
        scalar B = 5;
	Random randomizer_i(1);
	scalar fluc = 30;
	scalar min = 1-fluc/A;
	scalar max = 1+fluc/A;
	scalar range = max-min;
        forAll(CC,cellI)
        {

        	scalar y = CC[cellI].y();

            T[cellI] = T_i - (A * 0.5  *  (1-tanh(B*(mag(y-L/2)/ro - ro/mag(y-L/2)))));

        }

        writeEntry(os,"",T);
    #};

    //! Optional:
    codeInclude
    #{
	#include <Random.H>
        #include "fvCFD.H"

    #};


    codeOptions
    #{

        -I$(LIB_SRC)/finiteVolume/lnInclude \
        -I$(LIB_SRC)/meshTools/lnInclude

    #};


    //! libs:

    codeLibs
    #{
        -lmeshTools \
        -lfiniteVolume
    #};

};

boundaryField
{

    upperBoundary
    {
        type            zeroGradient;
    }

    lowerBoundary
    {
        type            zeroGradient;
    }

    leftBoundary
    {
        type            cyclic;
    }

    rightBoundary
    {
        type            cyclic;
    }

    frontAndBack
    {
        type            empty;
    }

}


// ************************************************************************* //
